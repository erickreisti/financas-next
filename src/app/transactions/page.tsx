// src/app/transactions/page.tsx
// Diretiva use client - OBRIGAT√ìRIO para hooks no App Router
"use client";

// Importa React para criar componente
import React, { useState } from "react";

// Importa hooks customizados dos contextos criados
// useTransactions: hook para acessar contexto de transa√ß√µes
import { useTransactions } from "@/contexts/TransactionContext";
import Header from "@/components/Header";
import Navigation from "@/components/Navigation";

// Importa componentes da aplica√ß√£o
// FilterBar: barra de filtros e ordena√ß√£o
// TransactionList: lista de transa√ß√µes
import FilterBar from "@/components/FilterBar";
import TransactionList from "@/components/TransactionList";

// Interface para dados de transa√ß√£o PARA CRIA√á√ÉO (sem ID)
// TransactionData = dados que usu√°rio digita (sem ID ainda)
interface TransactionData {
  type: "receita" | "despesa"; // Tipo restrito a essas duas op√ß√µes apenas
  description: string; // Descri√ß√£o obrigat√≥ria (texto)
  category: string; // Categoria obrigat√≥ria (texto)
  amount: number; // Valor num√©rico (decimal)
  date: string; // Data em formato ISO string
  userId: string; // ID do usu√°rio propriet√°rio (chave estrangeira)
}

// Interface para transa√ß√£o COMPLETA (com ID - do banco)
// Transaction = dados completos (com ID gerado pelo banco)
interface Transaction extends TransactionData {
  id: string; // ID √∫nico da transa√ß√£o (CUID do Prisma)
  createdAt: string; // Data de cria√ß√£o (string ISO)
  updatedAt: string; // Data de atualiza√ß√£o (string ISO)
}

// Componente TransactionsPage: p√°gina com todas transa√ß√µes
// CLIENT COMPONENT por causa dos hooks (use client acima)
export default function TransactionsPage() {
  // Usa hooks dos contextos para acessar dados
  // DESTRUCTURING para acessar fun√ß√µes e dados do contexto de transa√ß√µes
  const { transactions, deleteTransaction } = useTransactions();

  // Estados locais para filtros e ordena√ß√£o (n√£o precisam estar no contexto)
  // useState COM TIPAGEM EXPL√çCITA
  const [filterType, setFilterType] = useState<string>("todas"); // Filtro por tipo
  const [filterCategory, setFilterCategory] = useState<string>("todas"); // Filtro por categoria
  const [isSorted, setIsSorted] = useState<boolean>(false); // Controle de ordena√ß√£o

  // Fun√ß√£o para alternar ordena√ß√£o das transa√ß√µes
  // FUN√á√ÉO PURA PARA ALTERAR ESTADO
  const toggleSort = (): void => {
    // Inverte o valor atual do estado isSorted
    setIsSorted(!isSorted);
  };

  // Fun√ß√£o para alterar filtros (tipo ou categoria)
  // FUN√á√ÉO PURA PARA ALTERAR ESTADOS DE FILTRO
  const handleFilterChange = (filterName: string, value: string): void => {
    // Verifica qual filtro est√° sendo alterado e atualiza o estado correspondente
    if (filterName === "type") {
      setFilterType(value); // Atualiza filtro de tipo
    } else if (filterName === "category") {
      setFilterCategory(value); // Atualiza filtro de categoria
    }
  };

  // Filtra transa√ß√µes baseado nos filtros selecionados
  // FILTRAGEM DE DADOS COM L√ìGICA DE NEG√ìCIO
  const filteredTransactions = transactions.filter((transaction) => {
    const typeMatch = filterType === "todas" || transaction.type === filterType;
    const categoryMatch =
      filterCategory === "todas" || transaction.category === filterCategory;
    return typeMatch && categoryMatch;
  });

  // Ordena transa√ß√µes se isSorted for true
  // ORDENA√á√ÉO DE DADOS COM L√ìGICA DE NEG√ìCIO
  const sortedTransactions = isSorted
    ? [...filteredTransactions].sort(
        (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
      )
    : filteredTransactions;

  // Retorna JSX do componente
  // JSX COM DADOS PROCESSADOS E HOOKS
  return (
    // Div principal com classes Tailwind para layout
    <div className="min-h-screen flex flex-col">
      {/* Header da aplica√ß√£o - AGORA USA CONTEXTO INTERNAMENTE */}
      <Header />

      {/* Navega√ß√£o entre p√°ginas */}
      <Navigation />

      {/* Conte√∫do principal da p√°gina */}
      <main className="flex-1 container mx-auto py-8">
        {/* T√≠tulo da p√°gina */}
        <h1 className="text-3xl font-bold mb-8">üìã Transa√ß√µes</h1>

        {/* Barra de filtros usando componente reutiliz√°vel */}
        {/* PASSA TODOS FILTROS E FUN√á√ïES DO CONTEXTO */}
        <FilterBar
          filterType={filterType}
          filterCategory={filterCategory}
          onFilterChange={handleFilterChange}
          onSort={toggleSort}
          isSorted={isSorted}
        />

        {/* Contador de transa√ß√µes encontradas */}
        <div style={{ marginTop: "20px" }}>
          <p>
            <strong>{sortedTransactions.length}</strong> transa√ß√µes encontradas
          </p>
        </div>

        {/* Lista de transa√ß√µes usando componente reutiliz√°vel */}
        {/* PASSA TRANSA√á√ïES FILTRADAS/ORDENADAS E FUN√á√ÉO DELETE DO CONTEXTO */}
        <TransactionList
          transactions={sortedTransactions}
          onDeleteTransaction={deleteTransaction}
        />
      </main>
    </div>
  );
}
