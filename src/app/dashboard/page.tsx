// src/app/dashboard/page.tsx
// Diretiva use client - OBRIGAT√ìRIO para hooks no App Router
"use client";

// Importa React para criar componente
import React from "react";

// Importa hooks customizados dos contextos criados
// ‚úÖ useTransactions para acessar transa√ß√µes e fun√ß√µes
// ‚úÖ useTheme para acessar tema e fun√ß√£o toggle
import { useTransactions } from "@/contexts/TransactionContext";
import { useTheme } from "@/contexts/ThemeContext";

// Importa componentes da aplica√ß√£o
// ‚úÖ Header sem props (usa contexto internamente)
// ‚úÖ Navigation sem props (usa contexto internamente)
import Header from "@/components/Header";
import Navigation from "@/components/Navigation";
import Saldo from "@/components/Saldo";
import TransactionList from "@/components/TransactionList";
import TransactionForm from "@/components/TransactionForm";

// Componente DashboardPage: p√°gina principal com vis√£o geral
// ‚úÖ CLIENT COMPONENT por causa dos hooks (use client acima)
export default function DashboardPage() {
  // Usa hooks dos contextos para acessar dados
  // ‚úÖ DESTRUCTURING para acessar fun√ß√µes e dados do contexto de transa√ß√µes
  const { transactions, addTransaction, deleteTransaction, calculateTotal } =
    useTransactions();

  // ‚úÖ DESTRUCTURING para acessar fun√ß√µes e dados do contexto de tema
  const { darkMode, toggleDarkMode } = useTheme();

  // Filtra apenas as √∫ltimas 5 transa√ß√µes (slice(-5) pega os √∫ltimos 5 itens)
  // ‚úÖ FILTRAGEM DE DADOS COM L√ìGICA DE NEG√ìCIO
  const recentTransactions = transactions.slice(-5);

  // Retorna JSX do componente
  // ‚úÖ JSX COM DADOS PROCESSADOS E HOOKS
  return (
    // Div principal com classes Tailwind para layout
    <div className="min-h-screen flex flex-col">
      {/* Header da aplica√ß√£o - AGORA USA CONTEXTO INTERNAMENTE */}
      {/* ‚úÖ REMOVIDO PROPS: Header usa useTheme diretamente */}
      <Header />

      {/* Navega√ß√£o entre p√°ginas */}
      <Navigation />

      {/* Conte√∫do principal da p√°gina */}
      <main className="flex-1 container mx-auto py-8">
        {/* T√≠tulo da p√°gina */}
        <h1 className="text-3xl font-bold mb-8">üìä Dashboard</h1>

        {/* Componente Saldo usando fun√ß√£o do contexto para calcular total */}
        {/* ‚úÖ PASSA TOTAL CALCULADO PELO CONTEXTO */}
        <Saldo total={calculateTotal()} />

        {/* Se√ß√£o de √∫ltimas transa√ß√µes */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-8">
          {/* Subt√≠tulo da se√ß√£o */}
          <h2 className="text-xl font-semibold mb-4">√öltimas Transa√ß√µes</h2>

          {/* Lista de transa√ß√µes recentes usando componente reutiliz√°vel */}
          {/* ‚úÖ PASSA TRANSA√á√ïES FILTRADAS E FUN√á√ÉO DELETE DO CONTEXTO */}
          {/* AGORA DELETE TRANSACTION RECEBE STRING (CUID) */}
          <TransactionList
            transactions={recentTransactions}
            onDeleteTransaction={deleteTransaction} // ‚úÖ AGORA RECEBE STRING
          />
        </div>

        {/* Se√ß√£o para adicionar nova transa√ß√£o */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          {/* Subt√≠tulo da se√ß√£o */}
          <h2 className="text-xl font-semibold mb-4">
            Adicionar Nova Transa√ß√£o
          </h2>

          {/* Formul√°rio para adicionar transa√ß√£o usando componente reutiliz√°vel */}
          {/* ‚úÖ CORRE√á√ÉO: PASSA FUN√á√ÉO addTransaction DO CONTEXTO */}
          {/* TransactionForm espera TransactionData (sem ID) */}
          <TransactionForm
            userId="user-test-id" // ‚úÖ ID de teste (em produ√ß√£o vir√° da autentica√ß√£o)
            onAddTransaction={addTransaction} // ‚úÖ FUN√á√ÉO DO CONTEXTO (recebe TransactionData)
          />
        </div>
      </main>
    </div>
  );
}
