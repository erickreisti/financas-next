// src/components/TransactionForm.tsx
// Diretiva use client - marca componente como Client Component para interatividade
"use client";

// Importa React e hooks do React
import { useState } from "react"; // ‚úÖ Hook para gerenciar estado local

// Importa React Hook Form e resolvers Zod para valida√ß√£o de formul√°rios
import { useForm } from "react-hook-form"; // ‚úÖ Gerenciamento avan√ßado de formul√°rios
import { zodResolver } from "@hookform/resolvers/zod"; // ‚úÖ Integra√ß√£o Zod + React Hook Form

// Importa esquemas Zod e tipos para valida√ß√£o type-safe
import { transactionSchema, type TransactionFormData } from "@/lib/schemas"; // ‚úÖ Valida√ß√£o e tipagem

// Importa Server Action para criar transa√ß√£o no servidor
import { createTransaction } from "@/actions/transactionActions"; // ‚úÖ Server Action

// Componente funcional TransactionForm - recebe userId como prop
export function TransactionForm({ userId }: { userId: string }) {
  // ‚úÖ Tipagem expl√≠cita da prop

  // Estados locais para gerenciar loading e mensagens de feedback
  const [isPending, setIsPending] = useState(false); // ‚úÖ Estado para spinner/loading
  const [message, setMessage] = useState<{
    // ‚úÖ Estado para mensagens de sucesso/erro
    type: "success" | "error"; // ‚úÖ Tipo restrito a success ou error
    text: string; // ‚úÖ Texto da mensagem
  } | null>(null); // ‚úÖ Pode ser null (nenhuma mensagem)

  // Configura React Hook Form com resolver Zod para valida√ß√£o autom√°tica
  const {
    register, // ‚úÖ Fun√ß√£o para registrar campos do formul√°rio
    handleSubmit, // ‚úÖ Fun√ß√£o para lidar com submit do formul√°rio
    formState: { errors }, // ‚úÖ Estado com erros de valida√ß√£o
    reset, // ‚úÖ Fun√ß√£o para resetar formul√°rio
  } = useForm<TransactionFormData>({
    // ‚úÖ Tipagem type-safe do formul√°rio
    resolver: zodResolver(transactionSchema), // ‚úÖ Resolver Zod para valida√ß√£o
    defaultValues: {
      // ‚úÖ Valores padr√£o para campos do formul√°rio
      type: "receita", // ‚úÖ Tipo padr√£o: receita
      date: new Date().toISOString().split("T")[0], // ‚úÖ Data atual (formato YYYY-MM-DD)
      userId: userId, // ‚úÖ ID do usu√°rio logado
    },
  });

  // Fun√ß√£o ass√≠ncrona para lidar com submit do formul√°rio
  const onSubmit = async (data: TransactionFormData) => {
    // ‚úÖ Dados type-safe validados
    setIsPending(true); // ‚úÖ Iniciar estado de loading
    setMessage(null); // ‚úÖ Limpar mensagens anteriores

    try {
      // Chamar Server Action com dados validados do formul√°rio
      const result = await createTransaction(data); // ‚úÖ Dados j√° validados pelo Zod!

      // Verificar resultado da opera√ß√£o
      if (result.success) {
        // Se sucesso, mostrar mensagem positiva e resetar formul√°rio
        setMessage({ type: "success", text: "Transa√ß√£o criada com sucesso!" });
        reset(); // ‚úÖ Limpar todos campos do formul√°rio
      } else {
        // Se erro, mostrar mensagem negativa
        setMessage({
          type: "error",
          text: result.error || "Erro ao criar transa√ß√£o",
        });
      }
    } catch (error) {
      // Tratar erros inesperados
      setMessage({ type: "error", text: "Erro ao processar formul√°rio" });
    } finally {
      // Finalizar estado de loading independentemente do resultado
      setIsPending(false); // ‚úÖ Sempre finaliza loading
    }
  };

  // Retornar JSX (interface do componente)
  return (
    // Formul√°rio com onSubmit chamando handleSubmit(onSubmit)
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      {/* Select para tipo de transa√ß√£o */}
      <div>
        <select
          {...register("type")} // ‚úÖ Registrar campo com Zod (valida√ß√£o autom√°tica)
          className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          {/* Op√ß√µes de tipo com emojis para melhor UX */}
          <option value="receita">üü¢ Receita</option>
          <option value="despesa">üî¥ Despesa</option>
        </select>

        {/* Mensagem de erro autom√°tica do Zod */}
        {errors.type && (
          <p className="text-red-500 text-sm dark:text-red-400">
            {errors.type.message}{" "}
            {/* ‚úÖ Mensagem de erro personalizada do Zod */}
          </p>
        )}
      </div>

      {/* Input para descri√ß√£o da transa√ß√£o */}
      <div>
        <input
          {...register("description")} // ‚úÖ Registrar campo com Zod
          placeholder="Descri√ß√£o" // ‚úÖ Placeholder para orienta√ß√£o
          className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />

        {/* Mensagem de erro autom√°tica do Zod */}
        {errors.description && (
          <p className="text-red-500 text-sm dark:text-red-400">
            {errors.description.message}{" "}
            {/* ‚úÖ Mensagem de erro personalizada */}
          </p>
        )}
      </div>

      {/* Select para categoria da transa√ß√£o */}
      <div>
        <select
          {...register("category")} // ‚úÖ Registrar campo com Zod
          className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          {/* Op√ß√µes de categoria */}
          <option value="salario">Sal√°rio</option>
          <option value="alimentacao">Alimenta√ß√£o</option>
          <option value="transporte">Transporte</option>
          <option value="lazer">Lazer</option>
          <option value="saude">Sa√∫de</option>
          <option value="educacao">Educa√ß√£o</option>
          <option value="outros">Outros</option>
        </select>

        {/* Mensagem de erro autom√°tica do Zod */}
        {errors.category && (
          <p className="text-red-500 text-sm dark:text-red-400">
            {errors.category.message} {/* ‚úÖ Mensagem de erro personalizada */}
          </p>
        )}
      </div>

      {/* Input para valor da transa√ß√£o */}
      <div>
        <input
          {...register("amount", { valueAsNumber: true })} // ‚úÖ Converter string ‚Üí n√∫mero
          type="number" // ‚úÖ Tipo number para teclado num√©rico mobile
          step="0.01" // ‚úÖ Permitir casas decimais
          placeholder="Valor (R$)" // ‚úÖ Placeholder para orienta√ß√£o
          className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />

        {/* Mensagem de erro autom√°tica do Zod */}
        {errors.amount && (
          <p className="text-red-500 text-sm dark:text-red-400">
            {errors.amount.message} {/* ‚úÖ Mensagem de erro personalizada */}
          </p>
        )}
      </div>

      {/* Input para data da transa√ß√£o */}
      <div>
        <input
          {...register("date")} // ‚úÖ Registrar campo com Zod
          type="date" // ‚úÖ Tipo date para calend√°rio nativo
          className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />

        {/* Mensagem de erro autom√°tica do Zod */}
        {errors.date && (
          <p className="text-red-500 text-sm dark:text-red-400">
            {errors.date.message} {/* ‚úÖ Mensagem de erro personalizada */}
          </p>
        )}
      </div>

      {/* Mensagens de feedback (sucesso ou erro) */}
      {message && (
        <div
          className={`p-3 rounded ${
            message.type === "success"
              ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200"
              : "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200"
          }`}
        >
          {message.text} {/* ‚úÖ Texto da mensagem */}
        </div>
      )}

      {/* Bot√£o de submit com estado de loading */}
      <button
        type="submit" // ‚úÖ Tipo submit para enviar formul√°rio
        disabled={isPending} // ‚úÖ Desabilitar durante loading
        className="w-full bg-blue-500 hover:bg-blue-600 text-white p-2 rounded disabled:opacity-50 dark:bg-blue-600 dark:hover:bg-blue-700"
      >
        {/* Texto din√¢mico baseado no estado de loading */}
        {isPending ? "Processando..." : "‚ûï Adicionar"}
      </button>
    </form>
  );
}
