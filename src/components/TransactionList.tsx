// src/components/TransactionList.tsx
// Diretiva use client - OBRIGAT√ìRIO para hooks no App Router
"use client";

// Importa React para criar componente
import React from "react";

// Interface para definir a estrutura de uma transa√ß√£o
// ‚úÖ TIPAGEM EXPL√çCITA PARA SEGURAN√áA E AUTO-COMPLETE
interface Transaction {
  id: string; // ‚úÖ AGORA √â STRING (CUID do Prisma)
  type: "receita" | "despesa"; // Tipo restrito a essas duas op√ß√µes apenas
  description: string; // Descri√ß√£o obrigat√≥ria (texto)
  category: string; // Categoria obrigat√≥ria (texto)
  amount: number; // Valor num√©rico (decimal)
  date: Date; // ‚úÖ AGORA √â Date (n√£o string)
  userId: string; // ID do usu√°rio propriet√°rio (chave estrangeira)
  createdAt: Date; // ‚úÖ AGORA √â Date (n√£o string)
  updatedAt: Date; // ‚úÖ AGORA √â Date (n√£o string)
}

// Interface para definir o formato das props recebidas
// ‚úÖ CONTRATO EXPL√çCITO DO QUE O COMPONENTE ESPERA RECEBER
interface TransactionListProps {
  transactions: Transaction[]; // Array de transa√ß√µes COM ID
  onDeleteTransaction: (id: string) => void; // ‚úÖ AGORA RECEBE STRING (CUID)
}

// Componente TransactionList: lista de transa√ß√µes
// Recebe props tipadas
const TransactionList = ({
  transactions,
  onDeleteTransaction,
}: TransactionListProps) => {
  // Objeto para mapear chaves de categoria para nomes amig√°veis
  // ‚úÖ MAPEAMENTO DE CATEGORIAS PARA NOMES LEG√çVEIS
  const categoryNames: { [key: string]: string } = {
    salario: "Sal√°rio",
    alimentacao: "Alimenta√ß√£o",
    transporte: "Transporte",
    lazer: "Lazer",
    saude: "Sa√∫de",
    educacao: "Educa√ß√£o",
    outros: "Outros",
  };

  // Fun√ß√£o para formatar data Date para formato brasileiro
  // ‚úÖ FUN√á√ÉO PURA PARA FORMATA√á√ÉO DE DATA
  const formatDate = (date: Date): string => {
    // Converte objeto Date para string no formato DD/MM/AAAA
    return date.toLocaleDateString("pt-BR");
  };

  // Fun√ß√£o para formatar valor como moeda brasileira
  // ‚úÖ FUN√á√ÉO PURA PARA FORMATA√á√ÉO DE MOEDA
  const formatCurrency = (value: number): string => {
    // Converte n√∫mero para string com 2 casas decimais e substitui . por ,
    return `R$ ${value.toFixed(2).replace(".", ",")}`;
  };

  // Retorna JSX do componente
  // ‚úÖ JSX COM DADOS PROCESSADOS E HOOKS
  return (
    // Lista n√£o ordenada para transa√ß√µes
    <ul className="transaction-list">
      {/* Verifica se h√° transa√ß√µes para mostrar */}
      {transactions.length === 0 ? (
        // Mensagem quando n√£o h√° transa√ß√µes
        <li style={{ padding: "20px", textAlign: "center", color: "#6c757d" }}>
          Nenhuma transa√ß√£o encontrada
        </li>
      ) : (
        // Mapeia array de transa√ß√µes para elementos JSX
        transactions.map((transaction) => (
          // Cada item da lista com key √∫nica (importante para React)
          <li
            key={transaction.id}
            className={`transaction-item ${transaction.type}`}
          >
            {/* Informa√ß√µes da transa√ß√£o */}
            <div className="transaction-info">
              {/* Descri√ß√£o em negrito */}
              <strong>{transaction.description}</strong>
              {/* Metadados da transa√ß√£o */}
              <div className="transaction-meta">
                {/* Data formatada */}
                <div>{formatDate(transaction.date)}</div>
                {/* Tag de categoria */}
                <span className="category-tag">
                  {/* Usa categoryNames para nome amig√°vel ou categoria original */}
                  {categoryNames[transaction.category] || transaction.category}
                </span>
              </div>
            </div>

            {/* Valor e bot√£o de deletar */}
            <div className="transaction-amount">
              {/* Valor com sinal + ou - baseado no tipo */}
              <span
                className={`value ${transaction.type === "receita" ? "positive" : "negative"}`}
              >
                {transaction.type === "receita" ? "+" : "-"}
                {formatCurrency(transaction.amount)}
              </span>
              {/* Bot√£o para deletar transa√ß√£o - AGORA RECEBE STRING */}
              <button
                type="button"
                className="delete-btn"
                // Quando clicado, chama onDeleteTransaction com ID STRING da transa√ß√£o
                onClick={() => onDeleteTransaction(transaction.id)} // ‚úÖ ID como STRING
              >
                üóëÔ∏è
              </button>
            </div>
          </li>
        ))
      )}
    </ul>
  );
};

// Exporta o componente para ser usado em outros arquivos
// ‚úÖ EXPORTA√á√ÉO PADR√ÉO PARA REUTILIZA√á√ÉO
export default TransactionList;
